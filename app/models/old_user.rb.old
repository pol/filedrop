# TODO: change this to use the YOGO user engines plugin
class User < ActiveRecord::Base
  include Authentication
  include Authentication::ByPassword
  include Authentication::ByCookieToken

  validates_presence_of     :login
  validates_length_of       :login,    :within => 3..40
  validates_uniqueness_of   :login
  validates_format_of       :login,    :with => Authentication.login_regex, :message => Authentication.bad_login_message

  validates_format_of       :name,     :with => Authentication.name_regex,  :message => Authentication.bad_name_message, :allow_nil => true
  validates_length_of       :name,     :maximum => 100

  validates_presence_of     :email
  validates_length_of       :email,    :within => 6..100 #r@a.wk
  validates_uniqueness_of   :email
  validates_format_of       :email,    :with => Authentication.email_regex, :message => Authentication.bad_email_message

  has_many :drops, :order => "created_at DESC"
  has_many :memberships
  has_many :groups, :through => :memberships

  # HACK HACK HACK -- how to do attr_accessible from here?
  # prevents a user from submitting a crafted form that bypasses activation
  # anything else you want your user to change should be added here.
  attr_accessible :login, :email, :name, :password, :password_confirmation
  cattr_reader :per_page
  @@per_page = 20

  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  #
  # uff.  this is really an authorization, not authentication routine.  
  # We really need a Dispatch Chain here or something.
  # This will also let us return a human error message.
  #
  # def self.authenticate(login, password)
  #   return nil if login.blank? || password.blank?
  #   u = find_by_login(login.downcase) # need to get the salt
  #   u && u.authenticated?(password) ? u : nil
  # end
  
  # Modified Authentication method that uses ldap and creates ldap authed users.
  def self.authenticate(login, password)
    return nil if login.blank? || password.blank?
    user = find_by_login(login) # need to get the salt
    if user && (user.authenticated?(password) || user.ldap_authenticated?(password))
      user
    elsif !user && User.ldap_authenticate?(login, password)
      #fetch user info
      user_data = User.fetch_ldap_user_data(login,password)
      # create the user
      User.create(
        :login    => login, 
        :password => password, :password_confirmation => password,
        :email    => "#{user_data[:mail][0]}",
        :name     => "#{user_data[:givenname]} #{user_data[:sn]}"
      )
    else 
      nil
    end
  end  

  # returns true if the user authenticates to the LDAP server with the 
  # provided password
  #
  def self.ldap_authenticate?(login,password)
    ldap_login_format = 'uid=%s,ou=People,dc=montana,dc=edu'
    SimpleLdapAuthenticator.servers = ['ds.montana.edu']
    SimpleLdapAuthenticator.use_ssl = true
    SimpleLdapAuthenticator.login_format = ldap_login_format
    SimpleLdapAuthenticator.logger = RAILS_DEFAULT_LOGGER
    SimpleLdapAuthenticator.ldap_library = 'net/ldap'
    SimpleLdapAuthenticator.valid?(login, password)
  end
  
  def ldap_authenticated?(password)
    User.ldap_authenticated?(self.login,password)
  end
  
  def self.fetch_ldap_user_data(login,password)
    ldap = Net::LDAP.new(:host=>'ds.montana.edu',
                         :port=>'636',
                         :encryption=>:simple_tls,
                         :base=>'ou=People,dc=montana,dc=edu')
    ldap.authenticate('uid=%s,ou=People,dc=montana,dc=edu' % login,password)
    result = ldap.search(:filter=>Net::LDAP::Filter.eq('uid',login))
    result[0] if result
  end

  def login=(value)
    write_attribute :login, (value ? value.downcase : nil)
  end

  def email=(value)
    write_attribute :email, (value ? value.downcase : nil)
  end
  
  def has_group?(value)
    !groups.select{|g| g.name == value}.empty?
  end

  protected
    


end
